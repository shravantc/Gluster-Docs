<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.6/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.6/ http://www.mediawiki.org/xml/export-0.6.xsd" version="0.6" xml:lang="en">
  <siteinfo>
    <sitename>OpenShift Wiki</sitename>
    <base>http://mediawiki-arao.itos.redhat.com/index.php/Main_Page</base>
    <generator>MediaWiki 1.19.15</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">OpenShift Wiki</namespace>
      <namespace key="5" case="first-letter">OpenShift Wiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Admin SSL</title>
    <ns>0</ns>
    <id>67</id>
      <sha1>jsavby22xsauauq0bmw0fao1yiwulik</sha1>
    <revision>
      <id>346</id>
      <timestamp>2015-02-26T09:22:38Z</timestamp>
      <contributor>
        <username>Schandra</username>
        <id>7</id>
      </contributor>
      <comment>Created page with &quot;{| class=&quot;wikitable&quot; !'''''[[Gluster_File_System_Documentation | Home!!]]''''' |}  = Setting up GlusterFS with SSL/TLS =  GlusterFS allows its communication to be secured usin...&quot;</comment>
      <text xml:space="preserve" bytes="5953">{| class=&quot;wikitable&quot;
!'''''[[Gluster_File_System_Documentation | Home!!]]'''''
|}

= Setting up GlusterFS with SSL/TLS =

GlusterFS allows its communication to be secured using the [http://tools.ietf.org/html/rfc5246 Transport Layer Security] standard (which supersedes Secure Sockets Layer), using the [https://www.openssl.org/ OpenSSL] library. Setting this up requires a basic working knowledge of some SSL/TLS concepts, which can only be briefly summarized here.

* &amp;quot;Authentication&amp;quot; is the process of one entity (e.g. a machine, process, or person) proving its identity to a second entity.
* &amp;quot;Authorization&amp;quot; is the process of checking whether an entity has permission to perform an action.
* TLS provides authentication and encryption. It does not provide authorization, though GlusterFS can use TLS-authenticated identities to authorize client connections to bricks/volumes.
* An entity X which must authenticate to a second entity Y does so by sharing with Y a ''certificate'', which contains information sufficient to prove X's identity. X's proof of identity also requires possession of a ''private key'' which matches its certificate, but this key is never seen by Y or anyone else. Because the certificate is already public, anyone who has the key can claim that identity.
* Each certificate contains the identity of its principal (owner) along with the identity of a ''certifying authority'' or CA who can verify the integrity of the certificate's contents. The principal and CA can be the same (a &amp;quot;self-signed certificate&amp;quot;). If they are different, the CA must ''sign'' the certificate by appending information derived from both the certificate contents and the CA's own private key.
* Certificate-signing relationships can extend through multiple levels. For example, a company X could sign another company Y's certificate, which could then be used to sign a third certificate Z for a specific user or purpose. Anyone who trusts X (and is willing to extend that trust through a ''certificate depth'' of two or more) would therefore be able to authenticate Y and Z as well.
* Any entity willing to accept other entities' authentication attempts must have some sort of database seeded with the certificates that already accept.

In GlusterFS's case, a client or server X uses the following files to contain TLS-related information:

* /etc/ssl/glusterfs.pem X's own certificate
* /etc/ssl/glusterfs.key X's private key
* /etc/ssl/glusterfs.ca concatenation of ''others''' certificates

GlusterFS always performs ''mutual authentication'', though clients do not currently do anything with the authenticated server identity. Thus, if client X wants to communicate with server Y, then X's certificate (or that of a signer) must be in Y's CA file, and vice versa.

For all uses of TLS in GlusterFS, if one side of a connection is configured to use TLS then the other side must use it as well. There is no automatic fallback to non-TLS communication, or allowance for concurrent TLS and non-TLS access to the same resource, because either would be insecure. Instead, any such &amp;quot;mixed mode&amp;quot; connections will be rejected by the TLS-using side, sacrificing availability to maintain security.

== Enabling TLS on the I/O Path ==

To enable authentication and encryption between clients and brick servers, two options must be set:

&lt;pre&gt;gluster volume set MYVOLUME client.ssl on
gluster volume set MYVOLUME server.ssl on&lt;/pre&gt;
Note that the above options affect only the GlusterFS native protocol. Foreign protocols such as NFS, SMB, or Swift will not be affected.

== Using TLS Identities for Authorization ==

Once TLS has been enabled on the I/O path, TLS identities can be used instead of IP addresses or plain usernames to control access to specific volumes. For example:

&lt;pre&gt;gluster volume set MYVOLUME auth.ssl-allow Zaphod&lt;/pre&gt;
Here, we're allowing the TLS-authenticated identity &amp;quot;Zaphod&amp;quot; to access MYVOLUME. This is intentionally identical to the existing &amp;quot;auth.allow&amp;quot; option, except that the name is taken from a TLS certificate instead of a command-line string. Note that infelicities in the gluster CLI preclude using names that include spaces, which would otherwise be allowed.

== Enabling TLS on the Management Path ==

Management-daemon traffic is not controlled by an option. Instead, it is controlled by the presence of a file on each machine:

&lt;pre&gt;/var/lib/glusterd/secure-access&lt;/pre&gt;
Creating this file will cause glusterd connections made from that machine to use TLS. Note that even clients must do this to communicate with a remote glusterd while mounting, but not thereafter.

== Additional Options ==

The GlusterFS TLS implementation supports two additional options related to TLS internals.

The first option allows the user to set the certificate depth, as mentioned above.

&lt;pre&gt;gluster volume set MYVOLUME ssl.cert-depth 2&lt;/pre&gt;
Here, we're setting our certificate depth to two, as in the introductory example. By default this value is zero, meaning that only certificates which are directly specified in the local CA file will be accepted (i.e. no signed certificates at all).

The second option allows the user to specify the set of allowed TLS ciphers.

&lt;pre&gt;gluster volume set MYVOLUME ssl.cipher-list HIGH:!SSLv2&lt;/pre&gt;
Cipher lists are negotiated between the two parties to a TLS connection, so that both sides' security needs are satisfied. In this example, we're setting the initial cipher list to HIGH, representing ciphers that the cryptography community still believes to be unbroken. We are also explicitly disallowing ciphers specific to SSL version 2. The default is based on this example but also excludes CBC-based cipher modes to provide extra mitigation against the [http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3566 POODLE] attack.


&lt;br /&gt;
&lt;br /&gt;
{| class=&quot;wikitable&quot;
!'''''[[Gluster_File_System_Documentation | Home!!]]'''''
|}</text>
    </revision>
  </page>
</mediawiki>
